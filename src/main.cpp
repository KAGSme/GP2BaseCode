#include "Common.h"
#include "Graphics.h"

float verts[] = { 0.0f, 1.0f, 0.0f, //Top
-1.0f, -1.0f, 0.0f, //bottom Left
1.0f, -1.0f, 0.0f //bottome right
};

float vertsM[] = { 1.0f, 1.0f, 0.0f, //Top
0.0f, -1.0f, 0.0f, //bottom Left
2.0f, -1.0f, 0.0f //bottome right
};

GLuint VBO;

FILE _iob[] = { *stdin, *stdout, *stderr };

extern "C" FILE * __cdecl __iob_func(void)
{
	return _iob;
}

float trianglePosx = 0;
float trianglePosy = 0;

void initScene() {
	//Create buffer
	glGenBuffers(1, &VBO);
	//make new VBO active
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//Copy Vertex Data to VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);
}

void cleanUp() {
	glDeleteBuffers(1, &VBO);
}

void render() {
	//Set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	//Make the new VBO active
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//Esatblish its 3 coordinates per vertex with zero stride(space between elements)
	//in array and contain floating point numbers
	glVertexPointer(3, GL_FLOAT, 0, NULL);
	//Establish array contains vertices(not normals, colours, texture coords etc)
	glEnableClientState(GL_VERTEX_ARRAY);
	//switch to model view
	glMatrixMode(GL_MODELVIEW);
	//reset using identity matrix
	glLoadIdentity();
	//translate to -5 on z axis
	glTranslatef(0.0f, 0.0f, -5.0f);

	//begin drawing triangles
	glDrawArrays(GL_TRIANGLES, 0, sizeof(verts) / (3 * sizeof(float)));
}

void update() {
}

int main(int argc, char * arg[])
{

	bool run = true;
	bool pause = false;
	// init everything - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;

		return -1;
	}
	
	SDL_Window *window = SDL_CreateWindow("SDL", // window title
		SDL_WINDOWPOS_CENTERED, //x position, centered
		SDL_WINDOWPOS_CENTERED, //y position, centered
		640, //width, in pixels
		480, //height, in pixels
		SDL_WINDOW_OPENGL //flags
		);

	//Create an OpenGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//initialisation
	//call our InitOpenGL Function
	initOpenGL();
	//set the viewport
	setViewport(640, 480);

	initScene();
	
	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while (run) {
		//while we still have events in the queue
		while (SDL_PollEvent(&event)) {
			//get the event
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
				//set pur boolean which controls the loop to false
				run = false;
			}
			if (event.type == SDL_KEYDOWN) {
				switch (event.key.keysym.sym) {
				case SDLK_LEFT:
					trianglePosx += -0.1f;
					break;
				case SDLK_RIGHT:
					trianglePosx += 0.1f;
					break;
				case SDLK_UP:
					trianglePosy += 0.1f;
					break;
				case SDLK_DOWN:
					trianglePosy += -0.1f;
					break;
				}
			}
		}

		update();
		render();

		//Call Swap so that our GL back bffer is displayed
		SDL_GL_SwapWindow(window);
	}
	//clean up, in reverse order
	cleanUp();
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit();

    return 0;
}
