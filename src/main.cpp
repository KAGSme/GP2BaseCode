#include "Common.h"
#include "Graphics.h"
#include "Vertex.h"
#include "Shader.h"

Vertex verts[] = {
	//front
	{ -0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 1.0f },//Top Left
	{ -0.5f, -0.5f, 0.5f, 1.0f, 1.0f, 1.0f, 1.0f }, //bottom Left
	{ 0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 1.0f }, //bottom right
	{ 0.5f, 0.5f, 0.5f, 1.0f, 1.0f, 1.0f, 1.0f },//Top Right

	//back
	{ -0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 1.0f, 1.0f },//Top Left
	{ -0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 1.0f, 1.0f }, //bottom Left
	{ 0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 1.0f, 1.0f }, //bottom right
	{ 0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 1.0f, 1.0f },//Top Right
};

GLuint indices[] = {
	//front
	0,1,2,
	0,3,2,
	//left
	4,5,1,
	4,1,0,
	//right
	3,7,2,
	7,6,2,
	//bottom
	1,5,2,
	6,2,5,
	//top
	4,0,7,
	0,7,3,
	//back
	4,5,6,
	4,7,6
};

GLuint VBO;
GLuint EBO;
GLuint VAO;

Transform cubeTransform;
Transform cameraTransform = {0.0,0.0,0.6,0.0,0.0,-1.0};
float mposx, mposy;
GLuint shaderProgram = 0;

//matrices
mat4 viewMatrix;
mat4 projMatrix;
mat4 worldMatrix;
mat4 MVPMatrix;

void initScene() {
	glGenVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	//Create buffer
	glGenBuffers(1, &VBO);
	//make new VBO active
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//Copy Vertex Data to VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);

	glGenBuffers(1, &EBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	//Tell the shader that 0 is the position element
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), NULL);

	GLuint vertexShaderProgram = 0;
	string vsPath = ASSET_PATH + SHADER_PATH + "/simpleVS.glsl";
	vertexShaderProgram = loadShaderFromFile(vsPath, VERTEX_SHADER);
	checkForCompilerErrors(vertexShaderProgram);

	GLuint fragmentShaderProgram = 0;
	string fsPath = ASSET_PATH + SHADER_PATH + "/simpleFS.glsl";
	fragmentShaderProgram = loadShaderFromFile(fsPath, FRAGMENT_SHADER);
	checkForCompilerErrors(fragmentShaderProgram);

	shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShaderProgram);
	glAttachShader(shaderProgram, fragmentShaderProgram);
	glLinkProgram(shaderProgram);
	checkForLinkErrors(shaderProgram);

	//now we can delete the VS & FS Programs
	glDeleteShader(vertexShaderProgram);
	glDeleteShader(fragmentShaderProgram);

	glBindAttribLocation(shaderProgram, 0, "vertexPosition");
}

void cleanUp() {
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);
	glDeleteProgram(shaderProgram);
	glDeleteVertexArrays(1, &VAO);
}

void render() {
	//Set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glUseProgram(shaderProgram);
	glBindVertexArray(VAO);
	//begin drawing triangles
	glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint),GL_UNSIGNED_INT, 0);
}

void update() {
	projMatrix = perspective(45.0f, 640.0f / 480.0f, 0.1f, 100.0f);
	viewMatrix = lookAt(vec3(0.0f, 0.0f, 10.0f), vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f));
	worldMatrix = translate(mat4(1.0f), vec3(0.0f, 0.0f, 0.0f));
	MVPMatrix = projMatrix*viewMatrix*worldMatrix;
}

int main(int argc, char * arg[])
{

	bool run = true;
	bool pause = false;
	// init everything - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;

		return -1;
	}

	//ask for version 4.2 for opengl
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
	
	SDL_Window *window = SDL_CreateWindow("SDL", // window title
		SDL_WINDOWPOS_CENTERED, //x position, centered
		SDL_WINDOWPOS_CENTERED, //y position, centered
		1280, //width, in pixels
		720, //height, in pixels
		SDL_WINDOW_OPENGL //flags
		);

	//Create an OpenGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//initialisation
	//call our InitOpenGL Function
	initOpenGL();
	//set the viewport
	setViewport(1280, 720);

	initScene();
	
	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while (run) {
		//while we still have events in the queue
		while (SDL_PollEvent(&event)) {
			//get the event
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
				//set pur boolean which controls the loop to false
				run = false;
			}
			if (event.type == SDL_KEYDOWN) {
				switch (event.key.keysym.sym) {
				case SDLK_LEFT:
					cubeTransform.x += -0.1f;
					break;
				case SDLK_RIGHT:
					cubeTransform.x += 0.1f;
					break;
				case SDLK_UP:
					cubeTransform.rx += 10.0f;
					break;
				case SDLK_DOWN:
					cubeTransform.rx += -10.0f;
					break;
				case SDLK_w:
					cameraTransform.z += 0.5f;
					cameraTransform.rz += 0.5f;
					break;
				case SDLK_s:
					cameraTransform.z -= 0.5f;
					cameraTransform.rz -= 0.5f;
					break;
				case SDLK_a:
					cameraTransform.x -= 0.5f;
					cameraTransform.rx -= 0.5f;
					break;
				case SDLK_d:
					cameraTransform.x += 0.5f;
					cameraTransform.rx += 0.5f;
					break;
				}
			}
			if (event.type == SDL_MOUSEMOTION) {
				if(event.motion.x > mposx){
					cameraTransform.rx += 0.1f;
					mposx = event.motion.x;
				}
				if (event.motion.x < mposx) {
					cameraTransform.rx -= 0.1f;
					mposx = event.motion.x;
				}
				if (event.motion.y > mposy) {
					cameraTransform.ry -= 0.1f;
					mposy = event.motion.y;
				}
				if (event.motion.y < mposy) {
					cameraTransform.ry += 0.1f;
					mposy = event.motion.y;
				}
			}
		}

		update();
		render();

		//Call Swap so that our GL back bffer is displayed
		SDL_GL_SwapWindow(window);
	}
	//clean up, in reverse order
	cleanUp();
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit();

    return 0;
}
