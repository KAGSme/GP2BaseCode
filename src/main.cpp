#include "Common.h"
#include "Graphics.h"

FILE _iob[] = { *stdin, *stdout, *stderr };

extern "C" FILE * __cdecl __iob_func(void)
{
	return _iob;
}

void render() {
	//Set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	//switch to model view
	glMatrixMode(GL_MODELVIEW);
	//reset using identity matrix
	glLoadIdentity();
	//translate to -5 on z axis
	glTranslatef(0.0f, 0.0f, -5.0f);
	//begin drawing triangles
	glBegin(GL_TRIANGLES);
	glColor3f(1.0f, 0.0f, 0.0f); //color of vertices
	glVertex3f(-1.0f, 1.0f, 0.0f);
	glColor3f(1.0f, 1.0f, 0.0f);
	glVertex3f(-1.0f, -1.0f, 0.0f);
	glColor3f(1.0f, 1.0f, 1.0f);
	glVertex3f(1.0f, -1.0f, 0.0f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3f(1.0f, 0.0f, 0.0f); //color of vertices
	glVertex3f(-2.0f, 1.0f, 0.0f);
	glColor3f(1.0f, 1.0f, 0.0f);
	glVertex3f(-2.0f, -1.0f, 0.0f);
	glColor3f(1.0f, 1.0f, 1.0f);
	glVertex3f(0.0f, -1.0f, 0.0f);
	glEnd();
}

void update() {

}

bool run = true;

int main(int argc, char * arg[])
{
	// init everything - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;

		return -1;
	}
	
	SDL_Window *window = SDL_CreateWindow("SDL", // window title
		SDL_WINDOWPOS_CENTERED, //x position, centered
		SDL_WINDOWPOS_CENTERED, //y position, centered
		640, //width, in pixels
		480, //height, in pixels
		SDL_WINDOW_OPENGL //flags
		);

	//Create an OpenGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//initialisation
	//call our InitOpenGL Function
	initOpenGL();
	//set the viewport
	setViewport(640, 480);
	
	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while (run) {
		//while we still have events in the queue
		while (SDL_PollEvent(&event)) {
			//get the event
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
				//set pur boolean which controls the loop to false
				run = false;
			}
		}

		update();
		render();

		//Call Swap so that our GL back bffer is displayed
		SDL_GL_SwapWindow(window);
	}

	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit();

    return 0;
}
